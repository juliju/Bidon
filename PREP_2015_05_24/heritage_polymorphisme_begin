class Instrument
  def initialize (sonic_pi , synth = :beep)
    @sonic_pi = sonic_pi
    @synth = synth
  end
  

  def play (arrayOfNotes, arrayOfTime)
    @sonic_pi.with_synth @synth do 
      @sonic_pi.play_pattern_timed arrayOfNotes , arrayOfTime
    end
  end 
end


class Saw < Instrument
  def initialize (sonic_pi)
     super(sonic_pi, :saw)
  end
end

class Pulse < Instrument

  def initialize (sonic_pi)
    super(sonic_pi,:pulse)
   # @synth = :pulse
  end
  
  def play (arrayOfNotes, arrayOfTime)
    @sonic_pi.with_transpose 3 do
      super arrayOfNotes , arrayOfTime
    end
  end
  
end

use_bpm 80

demi_soupir = 0.25
soupir = 0.5
doublecroche = 16
croche = 0.25
noire = 0.5
double = 1

chest_music = [:E5,:E5,:E5,:E0,:C5,:E5,:G5,:E0,:G4]
tempo = [croche,noire,croche,croche,croche,noire,noire,noire]
comment do
  instruments = [Instrument.new(self), Saw.new(self), Pulse.new(self)]
  instruments.each do |i|
    # i.play([:fs4,:e4,:d4,:cs4,:b3,:a3,:b3,:cs4,:d4,:cs4,:b3,:a3,:g3,:fs3,:g3,:a3], [1])
    i.play(chest_music,tempo)
    sleep 2
  end
end

class PlayInstrument

  def initialize (sonic_pi)
    @sonic_pi = sonic_pi
  end

  def play (notes, tempo)
    @sonic_pi.play_pattern_timed notes, tempo
  end

  def playPulse(notes, tempo)
    @sonic_pi.with_synth :pulse do
      @sonic_pi.play_pattern_timed notes, tempo 
    end
  end

  def playSaw(notes, tempo)
    @sonic_pi.with_synth :saw do
      play notes, tempo
    end
  end
end

instrument = PlayInstrument.new(self)
instrument.play(chest_music, tempo)
sleep 1
instrument.playPulse(chest_music, tempo)
sleep 1
instrument.playSaw(chest_music, tempo)
